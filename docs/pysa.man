.\" Manpage for pysa.
.\" Contact thibault@mc2.io to correct errors or typos.
.TH pysa 8 "31 May 2013" "0.1.2a2" "pysa man page"
.SH NAME
pysa \- Reverse Engineer Server Configurations
.SH SYNOPSIS
.B pysa
[
.B -hpq
] [
.B -m
.I module-name
] [
.B -o
.I output-path
] [
.B -f
.I filter-config-path
]
.SH DESCRIPTION
.B pysa
scans your system and reverse engineers its configurations for easy replication.

.B pysa
was born from the simple idea that today, while the "cloud revolution" is in progress, it is still hard to keep track of the actual configuration of our machines and easily replicate it on another machine.

.B pysa
is able to scan your system, looking for different resources to deploy and generates some "autoconf" tools script to deploy it later on another computer.

See
.B RESOURCES
section for complete list of managed resources.

.B pysa
is able to generates the configuration in puppet format (see 
.BR puppet(1)
man page).
.SH OPTIONS
.IP "-h, --help"
Display the short help.
.IP "-p, --puppet"
Generates
.I Puppet
output.
.IP "-q, --quiet"
Activate quiet mode and displays only error messages.
By default,
.B pysa
displays all log messages.
.IP "-m module-name, --module module-name"
Choose output module name.

Default value: 
.B pysa
.IP "-o output-path, --output output-path"
Choose the output filter for generated scripts.

Default value: 
.B output
.IP "-f filter-config-path, --filter filter-config-path"
Specify a filter configuration file.

See
.B FILTERS
section for more details.
.SH RESOURCES
This section describes all the resources scanned by
.B pysa
.

By default, all item described are scanned. However, you can apply some filters to avoid or specify some. See the
.B FILTERS
section.

At the current state, the resources objects and keys are similar to
.I Puppet
types.

Please see
.B AUTOCONF TOOLS MODULES
section to be sure to be able to handle all scanned resources.
.SH \tconfiguration files - file
.B pysa
scans (and stores in output module) all files located in a specific location. Default
.B /etc

Primary key:
.B path
.SH \tpackages - package
.B pysa
is able to scan all packages provided by
.B yum
,
.B apt-get
, python
.B pip
(
.B pypi
), ruby
.B gems
, nodejs packaged modules (
.B npm
) and php packages managers (
.B pear
and
.B pecl
).

Furthermore,
.B pysa
is able to detect repositories
.B rpm
packages if
.B yum
is not present.

Primary key:
.B name
.SH \tservices - service
.B pysa
detects all startup services managed by
.B upstart
and
.B SysV init
scripts.

Please see
.B NOTES
section.

Primary key:
.B name
.SH \thosts - host
.B pysa
scans and reproduces existing hostname associations (default 
.B /etc/hosts
).

Primary key:
.B name
.SH \tusers - user
.B pysa
scans and reproduces existing users (
.B /etc/passwd
).

Primary key:
.B name
.SH \tgroups - group
.B pysa
scans and reproduces existing groups (
.B /etc/groups
).

Primary key:
.B name
.SH \tmounts - mount
.B pysa
scans and reproduces existing mount points (
.B /etc/fstab
).

Primary key:
.B device
.SH \tcrons - cron
.B pysa
scans and reproduces user's crons.

Primary key:
.B name
.SH \tssh keys - key
.B pysa
scans and reproduces root SSH keys (default 
.B /root/.ssh
).
The scan must be done by root to assure this feature.

SSH keys are manages as files.

Primary key:
.B name
.SH \tsources repositories - source
.B pysa
is able to recognize all source repositories managed by the most common SCM (
.B subversion
,
.B git
and
.B mercurial
) present in the system.

Primary key:
.B path
.SH \tpackage managers repositories - repository
.B pysa
scans and reproduces
.B yum
and
.B apt-get
repositories.

Primary key:
.B name
.SH AUTOCONF TOOLS MODULES
This section lists the autoconf tools' modules which may be used.

Modules are used for particular features and are only needed in some particular cases.
Of course, modules (as with the autoconf tools) have to be installed on the new machine, not the original one.
.SH Puppet modules
willdurand/nodejs:	add npm package manager support

nodes/php:		add php package manager support

puppetlabs/vcsrepo:	add scm (sources) support

to install a
.I Puppet
module:
puppet module install *module-name*
.SH FILTERS
.B pysa
integrates a powerful filters engine, which allows you to adapt its behavior to your needs.

A filter file is composed of sections, keys and values.
In some specific cases sections and/or keys can be split using a '.' (see below for more details).

A key can be tagged with '_' at the front to be considered as "action" key.
An action key is a key representing a specific action in the section (see below).

If some parameters conflict then the result may be harmful, please use it carefully.
Don't hesitate to report any abnormal output to us.

Some improvements are planned in this section.
.SH \tcommon action keys
.IP "_contentrefer"
This key acts as a pointer.
All the content of the referred section will be interpreted in the section.

This key should be set alone, as all keys will be replaced.
.SH \taddition section
.IP "section description"
This section is used to add or modify some values.

It can sounds similar to the replace section, but works in a completely different way:
     - The key is based on section key instead of content to replace
     - It is replaced at the scanning step, while the "
.B replacement
" section is done at the output generation step

Remember that "
.B addition
" is used to add/set a concrete parameter, while "
.B replace
" is used to replace some content.

The section name can be separate in multiple subsections using a dot '.', always starting by "
.B addition
" keyword:
     - "addition.resource_type" will replace values for all objects of resource_type
     - "addition.resource_type.key.value" will replace only the values for the objects where the key/value match the requirement

The key represents the resource key.

The value represents the resource value.
.IP "section format"
section_key = section_value
.IP "section action keys"
No action key for this section.
.SH \tdiscard section
.IP "section description"
This section is used to specify which object should or shouldn't be discard.

The key is separated in to two sub-keys by a dot '.', which represents the object type for the first one and the attribute name for the second one.

The values can be seen as a list of attributes separated by a coma ','.

The joker '*' can be used to specify to match all characters.
.IP "section format"
object.attribute_name = attribute1, attribute2*, ...
.IP "section action keys"
_resources: resource names
            Select which resources to be scanned, use it carefully, some resources might depend on others.
.SH \treplace section
.IP "section description"
This section is used to replace any kind of content.

The section name can be separated into multiple subsections using a dot '.', always starting by "
.B replace
" keyword:
     - "replace" will replace all values for all objects.
     - "replace.object" will replace all values for the selected object.
     - "replace.object.field" will replace only the values associated with the field in the selected object.

The key represents the new value.

The value(s) represents the target to replace.
.IP "section format"
new_value = old_value1, old_value2, ...
.IP "section action keys"
_replaceall: true/false
             REQUIRED
             Select the filtering mode (replace all except -true- or replace none except -false-)
             default: true
_except: primary_keys_values
.SH \tupdate section
.IP "section description"
This section is used to specify which "
.B package
" should be updated.
This section has been created due to the lack of old packages in many repositories.

A list of package names is specified as values of the "
.B except
" key, separated by a coma ','.

The joker '*' can be used to specify to match all characters.
.IP "section format"
except = package1, package2*, *package3, *package4*, ...
.IP "section action keys"
_update: true/false
         REQUIRED
         Select the filtering mode (update all except -true- or update none except -false-)
         default: false
.SH USAGE EXAMPLES
See
.I docs/examples
for configuration file examples.
.SH NOTES
.B pysa
has been inspired by a software called
.I Blueprint
(more information at http://devstructure.com/blueprint/ )

.B pysa
is currently in
.Ialpha release
and so does not (always) provide 100% functional results. This comes from the architectural choices that we've made. For example,
.B pysa
does not (yet) support the addition of user's packages, simply because we can't ensure the availability of these packages on the new system.

Furthermore,
.B pysa
depends on "autoconf" tools. This means that if a feature is not supported by one of these tools,
.B pysa
can't provide it.
For example, it is currently impossible to use upstart services on a redhat-based platform, as it is impossible to use npm package manager on Ubuntu.

Please don't hesitate to contact us for any kind of feedback, advice or requirement: pysa@madeiracloud.com.

If you have a question about a specific source file, you can also contact the author directly (see the
.B AUTHOR
section)
.SH SEE ALSO
.BR puppet(1)
.SH BUGS
No known bugs.
.SH AUTHOR
MADEIRACLOUD LTD. (www.madeiracloud.com)

Thibault BRONCHAIN (thibault@mc2.io)

Ken CHEN (ken@mc2.io)

Michael CHO (michael@mc2.io)
